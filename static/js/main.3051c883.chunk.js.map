{"version":3,"sources":["firebase.js","PunchCard.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","PunchCard","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","event","console","log","assertThisInitialized","preventDefault","punchName","target","id","currentPunches","props","habit","card","punches","database","ref","key","update","state","setState","defineProperty","bgColor","removeCard","cardID","remove","punch1","punch2","punch3","punch4","punch5","punch6","punch7","punch8","_this2","react_default","a","createElement","react","className","currentHabit","reward","onClick","style","backgroundColor","Component","Form","handleChange","name","value","handleSubmit","push","action","class","onChange","type","placeholder","autoComplete","required","for","App","habits","on","response","newState","data","val","src_Form","map","src_PunchCard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3051c883.chunk.js","sourcesContent":["import firebase from 'firebase';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBKIKbqJPDzujijna1bvpQj1LEIi6IsjhI\",\n    authDomain: \"reward-yourself-app.firebaseapp.com\",\n    databaseURL: \"https://reward-yourself-app.firebaseio.com\",\n    projectId: \"reward-yourself-app\",\n    storageBucket: \"\",\n    messagingSenderId: \"509192157453\",\n    appId: \"1:509192157453:web:4314b37124e5b3a1\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component, Fragment } from 'react';\nimport firebase from './firebase.js';\nimport './App.css';\n\nclass PunchCard extends Component {\n    constructor(){\n        super()\n        this.state = {\n            punches: 0,\n            \n            punch1: false,\n            punch2:false,\n            punch3:false,\n            punch4:false,\n            punch5:false,\n            punch6:false,\n            punch7:false,\n            punch8:false,\n        }\n    }\n\n    handleClick = (event) => {\n        console.log(this)\n        event.preventDefault();\n        let punchName = event.target.id\n        console.log(punchName)\n        const currentPunches = this.props.habit.card.punches;\n        const dbRef = firebase.database().ref(this.props.habit.key).update({ punches: currentPunches + 1 });\n\n        let currentPunchState = this.state[punchName]\n\n        this.setState({\n            [punchName]: {\n                bgColor: '#2b555a'\n            }\n        })\n    }  \n\n    removeCard = (cardID) => {\n        const dbRef = firebase.database().ref(cardID);\n        dbRef.remove();\n    }\n\n    render() {\n        const currentPunches = this.props.habit.card.punches;\n\n        return (\n            <Fragment>\n                <div className=\"card-with-details\">\n                    {currentPunches < 8 ? \n                    <div>\n                        <p>Habit: {this.props.habit.card.currentHabit}</p>\n                        <p>Reward: {this.props.habit.card.reward}</p>\n                        \n                        <div className=\"card\">\n                            <div \n                                className=\"punch\" \n                                id=\"punch1\"\n                                onClick={this.handleClick}\n                                style={{ backgroundColor: this.state.punch1.bgColor  }}>\n                            </div>\n                            <div\n                                className=\"punch\"\n                                id=\"punch2\"\n                                onClick={this.handleClick}\n                                style={{ backgroundColor: this.state.punch2.bgColor }}>\n                            </div>\n                            <div\n                                className=\"punch\"\n                                id=\"punch3\"\n                                onClick={this.handleClick}\n                                style={{ backgroundColor: this.state.punch3.bgColor }}>\n                            </div>\n                            <div\n                                className=\"punch\"\n                                id=\"punch4\"\n                                onClick={this.handleClick}\n                                style={{ backgroundColor: this.state.punch4.bgColor }}>\n                            </div>\n                            <div\n                                className=\"punch\"\n                                id=\"punch5\"\n                                onClick={this.handleClick}\n                                style={{ backgroundColor: this.state.punch5.bgColor }}>\n                            </div>\n                            <div\n                                className=\"punch\"\n                                id=\"punch6\"\n                                onClick={this.handleClick}\n                                style={{ backgroundColor: this.state.punch6.bgColor }}>\n                            </div>\n                            <div\n                                className=\"punch\"\n                                id=\"punch7\"\n                                onClick={this.handleClick}\n                                style={{ backgroundColor: this.state.punch7.bgColor }}>\n                            </div>\n                            <div\n                                className=\"punch\"\n                                id=\"punch8\"\n                                onClick={this.handleClick}\n                                style={{ backgroundColor: this.state.punch8.bgColor }}>\n                            </div>\n\n                        </div>\n                    </div>\n                    : \n                    <div className=\"reward-msg\">\n                        <p>You're doing amazing! Go treat yourself: {this.props.habit.card.reward}!</p>\n                    </div>} \n                    <button onClick={() => { \n                        this.removeCard(this.props.habit.key) }}\n                        >Remove</button>\n                </div>    \n            </Fragment>\n        )\n    }\n}\n\nexport default PunchCard;","import React, { Component } from 'react';\nimport firebase from './firebase.js';\n\nclass Form extends Component {\n    constructor() {\n        super()\n        this.state = {\n            currentHabit: '',\n            reward: '',\n            punches: 0,\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState({\n        [event.target.name] : event.target.value\n        })\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        const dbRef = firebase.database().ref();\n        dbRef.push(this.state);\n\n        this.setState({\n            currentHabit: '',\n            reward: '',\n        })\n    }\n\n    render(){\n        return(\n            <form action=\"\" class=\"form-container\">\n                <h2>What habits would you like to grow?</h2>\n                <input\n                    onChange={this.handleChange}\n                    type=\"text\"\n                    class=\"inputText\"\n                    name=\"currentHabit\"\n                    id=\"currentHabit\"\n                    placeholder=\"ex. pack lunch\"\n                    value={this.state.currentHabit}\n                    autoComplete=\"off\"\n                    required\n                />\n                <label for=\"currentHabit\" className=\"visually-hidden\">What habits would you like to grow?</label>\n\n                <h2>How would you like to reward yourself?</h2>\n                <input\n                    onChange={this.handleChange}\n                    type=\"text\"\n                    class=\"inputText\"\n                    name=\"reward\"\n                    id=\"reward\"\n                    placeholder=\"ex. get a frapp\"\n                    value={this.state.reward}\n                    autoComplete=\"off\"\n                    required\n                />\n                <label for=\"reward\" className=\"visually-hidden\">How would you like to reward youself?</label>\n\n                <p className=\"explanation\">Each time you practice your habit, punch a hole in your rewards card. When all are punched, go get your reward! You earned it!</p>\n\n                <button\n                    onClick={this.handleSubmit}\n                    class=\"form-button\"\n                >\n                    Get started!\n                </button>\n\n            </form>\n        ) \n    }\n}\n\nexport default Form;\n","import React, {Component} from 'react';\nimport firebase from './firebase.js';\nimport './App.css';\nimport PunchCard from './PunchCard.js'\nimport Form from './Form.js'\n\nclass App extends Component {\n  // need constructor and super if state is being changed\n  constructor(){\n    super();\n    // initial state\n    this.state = {\n      // the habits array is made up of objects - each object represents a habit with its name and its associated reward and completed punches.\n      habits: []\n    }\n  }\n\n  componentDidMount() {\n    // grabbing a ref from the DB\n    const dbRef = firebase.database().ref();\n      dbRef.on('value', (response) => {\n        const newState = [];\n        const data = response.val();\n\n        for (let key in data) {\n          newState.push({\n            key: key,\n            card: data[key],\n          });\n        }\n\n    // this is just updating the current state to reflect the updated DB values\n    this.setState({\n      habits: newState,\n    })\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <div className=\"wrapper\">\n          <Form />\n          {\n            this.state.habits.map((habit)=>{\n              return (<PunchCard habit={habit} reward={habit} />)\n            })\n            }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}